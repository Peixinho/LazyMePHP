<?php
// Ensure this is at the top

// CLI Bootstrapping for LazyMePHP
if (file_exists(__DIR__.'/vendor/autoload.php')) {
    require_once __DIR__.'/vendor/autoload.php';
} else {
    echo "Composer autoload file not found. Please run 'composer install' or 'composer update'.\n";
    exit(1);
}

if (file_exists(__DIR__.'/.env')) {
    $dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
    $dotenv->load();
} else {
    echo ".env file not found. Please ensure it exists in the project root.\n";
}

// Require the APP class definition itself as it's not yet autoloaded by its own definition
if (file_exists(__DIR__.'/App/Core/LazyMePHP.php')) {
    require_once __DIR__.'/App/Core/LazyMePHP.php';
} else {
    echo "LazyMe.php not found.\n";
    exit(1);
}

// Require the Database and Models files for CLI commands
if (file_exists(__DIR__.'/App/Tools/Database')) {
    require_once __DIR__.'/App/Tools/Database';
} else {
    echo "Database file not found.\n";
    exit(1);
}

// Require the Helper functions for file operations
if (file_exists(__DIR__.'/App/Tools/Helper')) {
    require_once __DIR__.'/App/Tools/Helper';
} else {
    echo "Helper file not found.\n";
    exit(1);
}

if (file_exists(__DIR__.'/App/Tools/Models')) {
    require_once __DIR__.'/App/Tools/Models';
} else {
    echo "Models file not found.\n";
    exit(1);
}

// Initialize the APP configuration
try {
    new Core\LazyMePHP();
} catch (Exception $e) {
    echo "Error initializing APP configuration: " . $e->getMessage() . "\n";
    exit(1);
}

/**
 * LazyMePHP CLI Tool
 * @copyright This file is part of the LazyMePHP developed by Duarte Peixinho
 * @author Duarte Peixinho
 */

class LazyMeCLI {
    private array $commands = [
        'serve' => 'Start the PHP development server',
        'build' => 'Run the build tools for classes, forms, and APIs',
        'batman' => 'Start the Batman dashboard server',
    ];

    public function run(array $argv): void {
        if (!isset($argv[1])) {
            $this->showHelp();
            exit(0);
        }

        $command = $argv[1];
        $tableName = $argv[2] ?? null;

        switch($command) {
            case 'serve':
                $this->serve();
                break;
            case 'build':
                $this->build();
                break;
            case 'batman':
                $this->batman();
                break;
            case 'make:model':
                $this->makeModel($tableName);
                break;
            default:
                echo "Unknown command: $command\n";
                $this->showHelp();
                exit(1);
        }
    }

    private function showHelp(): void {
        echo "LazyMePHP CLI Tool\n";
        echo "Usage: php LazyMePHP [command] [table_name]\n\n";
        echo "Available commands:\n";
        foreach ($this->commands as $command => $description) {
            echo "  " . str_pad($command, 15) . " $description\n";
        }
    }

    private function serve(): void {
        require_once __DIR__ . '/App/Tools/ServerOutput';
        $port = $this->getPort(8080);
        ServerOutput::printBanner('Web', '1.0.0');
        $host = 'localhost';
        $docRoot = __DIR__ . '/public';
        ServerOutput::printServerInfo($host, $port, $docRoot);
        echo "Starting development server on port $port...\n";
        echo "Server will be available at: http://localhost:$port\n";
        echo "Press Ctrl+C to stop the server.\n";
        @exec("php -S 0.0.0.0:$port -t ./public App/Tools/Webserver");
    }

    private function build(): void {
        echo "Running build tools...\n";
        if (file_exists(__DIR__.'/App/Tools/build')) {
            require_once __DIR__.'/App/Tools/build';
        } else {
            echo "Build script (App/Tools/build) not found.\n";
            exit(1);
        }
    }

    private function batman(): void {
        require_once __DIR__ . '/App/Tools/ServerOutput';
        $port = $this->getPort(8081);
        ServerOutput::printBanner('Batman', '1.0.0');
        $host = 'localhost';
        ServerOutput::printBatmanInfo($host, $port);
        echo "Starting Batman dashboard server...\n";
        echo "Batman dashboard will be available at: http://localhost:$port\n";
        echo "Press Ctrl+C to stop the server.\n";
        @exec("php -S 0.0.0.0:$port -t ./batman App/Tools/BatmanServer");
    }

    private function makeModel(?string $tableName): void {
        if (!$tableName) {
            echo "Error: Table name is required for make:model command.\n";
            echo "Usage: php LazyMePHP make:model [table_name]\n";
            exit(1);
        }

        echo "Generating model for table: $tableName\n";
        
        // Get all available tables
        $allTables = \Tools\Database\_DB_TABLE::GetAllTablesAndViews();
        
        if (!in_array($tableName, $allTables)) {
            echo "Error: Table '$tableName' not found in database.\n";
            echo "Available tables:\n";
            foreach ($allTables as $table) {
                echo "  - $table\n";
            }
            exit(1);
        }

        // Generate model
        $generator = new \Tools\Models\BuildTableModels(__DIR__ . '/App/Models', [$tableName], []);
        echo "Model generated successfully!\n";
    }

    private function getPort(int $default): int {
        echo "\n$default:?";
        $port = trim(fgets(STDIN));
        
        if (strlen($port) > 0 && !intval($port)) {
            echo "Invalid port, please try again\n";
            return $this->getPort($default);
        }
        
        if (strlen($port) == 0) {
            return $default;
        }
        
        return intval($port);
    }

    /**
     * Get HTML input type based on database field type
     */
    private function getInputType(string $dbType): string {
        $type = strtolower($dbType);
        
        if (strpos($type, 'text') !== false || strpos($type, 'varchar') !== false) {
            return 'text';
        }
        
        if (strpos($type, 'int') !== false) {
            return 'number';
        }
        
        if (strpos($type, 'float') !== false || strpos($type, 'decimal') !== false) {
            return 'number';
        }
        
        if (strpos($type, 'date') !== false) {
            return 'date';
        }
        
        if (strpos($type, 'time') !== false) {
            return 'time';
        }
        
        if (strpos($type, 'datetime') !== false) {
            return 'datetime-local';
        }
        
        if (strpos($type, 'bool') !== false) {
            return 'checkbox';
        }
        
        if (strpos($type, 'text') !== false && strpos($type, 'long') !== false) {
            return 'textarea';
        }
        
        return 'text';
    }
}

// Run the CLI
$cli = new LazyMeCLI();
$cli->run($argv);
?> 

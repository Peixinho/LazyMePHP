<?php

/**
 * LazyMePHP
 * @copyright This file is part of the LazyMePHP developed by Duarte Peixinho
 * @author Duarte Peixinho
 */

use Core\LazyMePHP;

use Tools\Database;
use Tools\Helper;

require_once(__DIR__.'/Helper');
require_once __DIR__ . '/LoggingTableSQL.php';

function enableLogging() {
  // Create Activity Log Structure if Needed
  if (LazyMePHP::ACTIVITY_LOG()) {
    $dbType = LazyMePHP::DB_TYPE();
    $queryString = getLoggingTableSQL($dbType);
    $sqlObj = LazyMePHP::DB_CONNECTION()->Query($queryString);
    LazyMePHP::DB_CONNECTION()->Close();
    echo "Done enabling logging with error tracking, press enter to continue...";
    \Tools\Helper\read();
  }
}

// Read All Tables From Database
$queryString = "";
switch (LazyMePHP::DB_TYPE())
{
  case 'mysql': // MSSQL
    $queryString = "SELECT `Table` FROM (SELECT TABLE_NAME as `Table` FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='".LazyMePHP::DB_NAME()."') SCH WHERE `table` NOT LIKE '\_\_%'";
    break;
  case 'mssql': // MYSQL
    $queryString = "SELECT `Table` FROM (SELECT DISTINCT TABLE_NAME as `Table` FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='".LazyMePHP::DB_NAME()."') SCH WHERE `Table` NOT LIKE '\_\_%'";
    break;
  case 'sqlite': // SQLITE
    $queryString = "SELECT name as `Table` FROM sqlite_master WHERE type='table' and name not like '#__%' ESCAPE '#' ORDER BY name";
    break;
}

// Fetch all tables descriptors
$sqlObj = LazyMePHP::DB_CONNECTION()->Query($queryString);
$tables = array();
$tablesDescriptors = array();
$i = 1;
while ($o=$sqlObj->FetchObject()) {
  require_once(__DIR__.'/Database');
  $table = new Tools\Database\_DB_TABLE($o->Table);
  $table->GetFieldsFromDB();
  $tableDescriptorSelected = false;
  foreach($table->GetTableFields() as $field)
  {
    if (!$field->IsPrimaryKey() && !$field->HasForeignKey()) {
      $tableDescriptorSelected = $field->GetName();
      break;
    }
  }
  if (!$tableDescriptorSelected) $tableDescriptorSelected = $table->GetPrimaryFieldName();
  $tables[] = $o->Table;
  $tablesDescriptors[$o->Table] = $tableDescriptorSelected;
}

// Check if descriptor file exists
if (!is_file(__DIR__."/.descriptors")) {
  // if not create one
  \Tools\Helper\TOUCH(__DIR__."/.descriptors");
  // and generate first version
  $tablesDescriptorsFile = fopen(__DIR__."/.descriptors","w");
  fwrite($tablesDescriptorsFile, json_encode($tablesDescriptors));
  fclose($tablesDescriptorsFile);
} 

// open file
$tablesDescriptorsFile = fopen(__DIR__."/.descriptors", "r");
$json = fread($tablesDescriptorsFile,filesize(__DIR__."/.descriptors"));
$tablesDescriptorsFromFile = json_decode($json, true);
// Update tablesDescriptors
foreach($tablesDescriptors as $t => $d) {
  if (key_exists($t, $tablesDescriptorsFromFile)) {
    $tablesDescriptors[$t] = $tablesDescriptorsFromFile[$t];
  }
}

$option = -1;
while (strlen($option)>0) {


  \Tools\Helper\printselect("Tables", $tables, null, $tablesDescriptors);
  echo "\nSelect your option:\n\n";
  echo "Build Classes: [c]\n";
  echo "Build Forms: [f]\n";
  echo "Build API: [a]\n";
  echo "Change Descriptor: [d]\n";
  echo "Enable Logging: [e]\n";
  echo "Quit: [q]\n";
  echo ":";
  $option = Tools\Helper\read();
  if (strtolower($option) == 'd') {
    $descriptor = Helper\select("Select Table to change descriptor", $tables, null, false, $tablesDescriptors);
    if ($descriptor) {
      $table = new _DB_TABLE($descriptor['name']);
      $table->GetFieldsFromDB();
      $fields = array();
      foreach($table->GetTableFields() as $f) $fields[] = $f->GetName();
      $sel = Helper\select("Select field", $fields, $tablesDescriptors[$descriptor['name']],false);
      $tablesDescriptors[$descriptor['name']] = $sel['name'];

      $tablesDescriptorsFile = fopen(__DIR__."/.descriptors","w");
      fwrite($tablesDescriptorsFile, json_encode($tablesDescriptors));
      fclose($tablesDescriptorsFile);
    }
  } else if (strtolower($option) == 'e') {
    enableLogging();
  }
  else if (strtolower($option) == 'c') {
    require_once(__DIR__.'/Classes');
    buildClasses();
  }
  else if (strtolower($option) == 'f') {
    require_once(__DIR__.'/Forms');
    BuildForms();
  }
  else if (strtolower($option) == 'a') {
    require_once(__DIR__.'/API');
    buildAPI();
  }
  else if (strtolower($option) == 'q') {
    echo "Exiting ...";
    exit();
  }
  else $option = -1;
}

// Classes
function buildClasses() {
  global $tables;
  global $tablesDescriptors;
  $classes = Helper\select("Select Tables to build classes", $tables, null, true, $tablesDescriptors);
  if ($classes) {
    Helper\clear();
    echo "Tables selected for building classes:\n\n";
    echo "\nTable name\n";
    foreach($classes as $c) echo $c['name']."\n";
    $proceed = null;
    while($proceed === null) $proceed = Helper\promptYesNo("Do you want to continue");
    if ($proceed) {
      $tablesList = array();
      foreach($classes as $c) $tablesList[] = $c['name'];
      new Tools\Classes\BuildTableClasses('App/Classes', $tablesList, $tablesDescriptors);
    }
  }
  echo "\nDone, press enter to finish...";
  Helper\read();
}
// Forms
function BuildForms() {
  global $tables;
  global $tablesDescriptors;
  Helper\clear();
  $forms = Helper\select("Select Tables to build forms", $tables, null, true, $tablesDescriptors);
  if ($forms) {
    Helper\clear();
    echo "Tables selected for building forms:\n\n";
    echo "\nTable name\n";
    foreach($forms as $f) echo $f['name']."\n";
    echo "\n";
    $replaceR = Helper\promptYesNo("Replace RouteForms");
    $buildViews = Helper\promptYesNo("Build Views");
    $proceed = Helper\promptYesNo("Proceed");
    if ($proceed) {
      $tablesList = array();
      foreach($forms as $c) $tablesList[] = $c['name'];
      new Tools\Forms\BuildTableForms('App/Controllers', 'App/Views', 'App/Classes', 'App/Routes', $tablesList, $replaceR == 'Y', $buildViews == 'Y');
    }
  }
  echo "\nDone, press enter to finish...";
  Helper\read();
}
// API
function buildAPI() {
  global $tables;
  global $tablesDescriptors;
  $api = Helper\select("Select Tables to build API", $tables, null, true, $tablesDescriptors);
  if ($api) {
    Helper\clear();
    echo "Tables selected for building API:\n\n";
    echo "\nTable name\n";
    foreach($api as $a) echo $a['name']."\n";
    $replaceA = false;
    while(strtoupper($replaceA) != "Y" && strtoupper($replaceA) != 'N') {
      echo "\nReplace RouteAPI.php? Y\\n: ";
      $proceed = trim(fgets(STDIN));
      if (!$replaceA) $replaceA = 'Y';
    }
    $proceed = null;
    while($proceed === null) $proceed = Helper\promptYesNo("Do you want to continue");
    if ($proceed) {
      $tablesList = array();
      foreach($api as $c) $tablesList[] = $c['name'];
      new Tools\API\BuildTableAPI('App/api', $replaceA=='Y', $tablesList);

    }
  }
  echo "\nDone, press enter to finish...";
  Helper\read();
}

?>


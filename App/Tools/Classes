<?php

/**
 * LazyMePHP
* @copyright This file is part of the LazyMePHP developed by Duarte Peixinho
* @author Duarte Peixinho
*/

namespace Tools\Classes;
use Core\LazyMePHP;
use Tools\Database\_DB_TABLE;
use function Tools\Helper\MKDIR;
use function Tools\Helper\UNLINK;
use function Tools\Helper\TOUCH;

/**
 * Interface for Automatic DB Classes
 */
interface IDB
{
    public function Save();
    public function Delete();
}

/**
 * Interface for Automatic DB Lists
 */
interface IDB_LIST
{
    public function FindAll();
    public function GetList(bool $serialize = false, array $mask = array());
}

// Add this function at the top of the file (after namespace and use statements)
if (!function_exists('mapSqlTypeToPhpType')) {
    function mapSqlTypeToPhpType($sqlType) {
        $type = strtolower($sqlType);
        return match (true) {
            str_starts_with($type, 'varchar'),
            str_starts_with($type, 'char'),
            str_starts_with($type, 'text'),
            str_starts_with($type, 'date'),
            str_starts_with($type, 'time') => 'string',
            str_starts_with($type, 'int') => 'int',
            str_starts_with($type, 'bool'),
            str_starts_with($type, 'boolean') => 'bool',
            str_starts_with($type, 'float'),
            str_starts_with($type, 'double'),
            str_starts_with($type, 'decimal') => 'float',
            default => 'string',
        };
    }
}

/**
 * Build class tables
 */
class BuildTableClasses extends _DB_TABLE
{
    /**
     * Constructor
     *
     * Builds Class Files for each Table in the DataBase
     *
     * @param (string) (path)
     * @return (null)
     */
	function __construct($classesPath, $tablesList, $tableDescriptors)
	{
    // Create Folder if doesn't exist
    if (!is_dir($classesPath)) MKDIR($classesPath);

    // SELECT Tables
    $queryString = "";
    switch (LazyMePHP::DB_TYPE())
    {
      case 'mssql': // MSSQL
            $queryString = "SELECT [Table] FROM (SELECT TABLE_NAME as [Table] FROM INFORMATION_SCHEMA.TABLES) SCH WHERE [Table] NOT LIKE '\_\_%'";
      break;
      case 'mysql': // MYSQL
          $queryString = "SELECT `Table` FROM (SELECT DISTINCT TABLE_NAME as `Table` FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='".LazyMePHP::DB_NAME()."') SCH WHERE `Table` NOT LIKE '\_\_%'";
      break;
      case 'sqlite': // SQLITE
          $queryString = "SELECT name as `Table` FROM sqlite_master WHERE type='table' and name not like '#__%' ESCAPE '#' ORDER BY name";
      break;
    }

    $sqlObj = LazyMePHP::DB_CONNECTION()->Query($queryString);
    while ($o=$sqlObj->FetchObject())
    {
      if (is_array($tablesList) && array_search($o->Table, $tablesList)!==false) {
        $db = new \Tools\Database\_DB_TABLE($o->Table);
        $this->ConstructClass($classesPath,$db,$tableDescriptors);
      }
    }
  }

	protected function ConstructClass($classesPath, $db, $tableDescriptors)
	{
		$db->GetFieldsFromDB();

        // Track generated members and methods to prevent duplicates
        $generatedMembers = array();
        $generatedMethods = array();

    if (UNLINK($classesPath."/".$db->GetTableName().".php"))
    {
      if (TOUCH($classesPath."/".$db->GetTableName().".php"))
      {
        $classFile = fopen($classesPath."/".$db->GetTableName().".php","w+");
        fwrite($classFile,"<?php");
        fwrite($classFile, "\n");
        fwrite($classFile, "\n");
        fwrite($classFile,"/**");
        fwrite($classFile, "\n");
        fwrite($classFile," * @copyright This file is part of the LazyMePHP Framework developed by Duarte Peixinho");
        fwrite($classFile, "\n");
        fwrite($classFile," * @author Duarte Peixinho");
        fwrite($classFile, "\n");
        fwrite($classFile," *");
        fwrite($classFile, "\n");
        fwrite($classFile," * Source File Generated Automatically");
        fwrite($classFile, "\n");
        fwrite($classFile," */");
        fwrite($classFile, "\n");
        fwrite($classFile, "\n");
        fwrite($classFile, "declare(strict_types=1);");
        fwrite($classFile, "\n");
        fwrite($classFile, "\n");
        fwrite($classFile, "namespace Classes;\n");
        fwrite($classFile, "use Core\LazyMePHP;\n");
        fwrite($classFile, "use Core\Helpers\ErrorUtil;\n");

        fwrite($classFile, "\n");
        fwrite($classFile, "class ".$db->_Tablename." extends \\Core\\ClassBase implements \\Core\\DB\\IDB {");
        fwrite($classFile, "\n");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t/**");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * Log Data");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t */");
        fwrite($classFile, "\n");
        fwrite($classFile, "\tprivate \$__log = array();");
        fwrite($classFile, "\n");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t/**");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * Descriptor");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t *");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * Get table descriptor");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t *");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * @return mixed");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t */");
        fwrite($classFile, "\n");
        fwrite($classFile, "\n");
        fwrite($classFile, "\tpublic function GetDescriptor() : mixed { return \$this->".(key_exists($db->_Tablename, $tableDescriptors)?$tableDescriptors[$db->_Tablename]:($db->IsView() || !$db->_PrimaryFieldName ? (count($db->_Tablefields) > 0 ? $db->_Tablefields[0]->GetName() : 'id') : $db->_PrimaryFieldName))."; }");
        fwrite($classFile, "\n");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t/**");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * PrimaryKey");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t *");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * Get table PrimaryKey value");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t *");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * @return int|null");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t */");
        fwrite($classFile, "\n");
        fwrite($classFile, "\tpublic function GetPrimaryKey() : ?int { return \$this->".($db->IsView() || !$db->_PrimaryFieldName ? (count($db->_Tablefields) > 0 ? $db->_Tablefields[0]->GetName() : 'id') : $db->_PrimaryFieldName)."; }");
        fwrite($classFile, "\n");
        $addToConstruct = "";
        $addToSerialize = "";
        $primaryKeyFound = false;
        
        // First pass: declare all regular properties and foreign key object properties
        foreach ($db->_Tablefields as $field) {
          $phpType = mapSqlTypeToPhpType($field->GetDataType());
          
          // Declare regular property
          if (!in_array($field->GetName(), $generatedMembers)) {
            $generatedMembers[] = $field->GetName();
            fwrite($classFile, "\n");
            fwrite($classFile, "\t/** @var ".$field->GetDataType()."|null ".$field->GetName()."*/");
            fwrite($classFile, "\n");
            fwrite($classFile, "\tprotected ?$phpType $".$field->GetName()." = null;");
            fwrite($classFile, "\n");
          }
          
          // Declare foreign key object property if needed
          if ($field->HasForeignKey() && $field->GetForeignField()) {
            $fkObjName = $field->GetName()."_OBJ";
            if (!in_array($fkObjName, $generatedMembers)) {
              $generatedMembers[] = $fkObjName;
              fwrite($classFile, "\n");
              fwrite($classFile, "\t/** @var ".$field->GetForeignTable()."|null ".$fkObjName." */");
              fwrite($classFile, "\n");
              fwrite($classFile, "\tprotected ?".$field->GetForeignTable()." $".$fkObjName." = null;");
              fwrite($classFile, "\n");
            }
          }
        }
        
        // Second pass: generate getters and setters
        foreach ($db->_Tablefields as $field) {
          $phpType = mapSqlTypeToPhpType($field->GetDataType());
          
          // Generate getter
          $getterName = "Get".ucfirst($field->GetName());
          if (!in_array($getterName, $generatedMethods)) {
            $generatedMethods[] = $getterName;
            fwrite($classFile, "\n");
            fwrite($classFile, "\t/**");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * Get ".$field->GetName());
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * @return ".$phpType."|null");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t */");
            fwrite($classFile, "\n");
            fwrite($classFile, "\tpublic function $getterName() : ?$phpType {");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\treturn \$this->".$field->GetName().";");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t}");
            fwrite($classFile, "\n");
          }
          
          // Generate setter
          $setterName = "Set".ucfirst($field->GetName());
          if (!in_array($setterName, $generatedMethods)) {
            $generatedMethods[] = $setterName;
            fwrite($classFile, "\n");
            fwrite($classFile, "\t/**");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * Set ".$field->GetName());
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * @param ".$phpType."|null $".$field->GetName());
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * @return void");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t */");
            fwrite($classFile, "\n");
            fwrite($classFile, "\tpublic function $setterName(?$phpType $".$field->GetName().") : void {");
            fwrite($classFile, "\n");
            if ($field->HasForeignKey() && $field->GetForeignField())
            {
                fwrite($classFile, "\n");
                fwrite($classFile, "\t\tif (\$this->".$field->GetName()." !== \$".$field->GetName().") {");
                fwrite($classFile, "\n");
                fwrite($classFile, "\t\t\t\$this->".$field->GetName()."_OBJ = null;");
                fwrite($classFile, "\n");
                fwrite($classFile, "\t\t}");
            }
            fwrite($classFile, "\n");
            switch ($field->GetDataType())
            {
                case "bool":
                case "float":
                case "int":
                    if ($field->AllowNull())
                        fwrite($classFile, "\t\tif (!empty(\$this->".$field->GetName().") && LazyMePHP::ACTIVITY_LOG() && \$this->".$field->GetName()."!=\$".$field->GetName().")\n\t\t\t\$this->__log['".$field->GetName()."']=array(\$this->".$field->GetName().", \$".$field->GetName().");");
                    else
                        fwrite($classFile, "\t\tif (LazyMePHP::ACTIVITY_LOG() && \$this->".$field->GetName()."!=\$".$field->GetName().")\n\t\t\t\$this->__log['".$field->GetName()."']=array(\$this->".$field->GetName().", \$".$field->GetName().");");
                    break;
                case "string":
                    if ($field->AllowNull())
                        fwrite($classFile, "\t\tif (!empty(\$this->".$field->GetName().") && LazyMePHP::ACTIVITY_LOG() && \$this->".$field->GetName()."!=\$".$field->GetName().")\n\t\t\t\$this->__log['".$field->GetName()."']=array(substr(\$this->".$field->GetName()." ?? '',0,255), substr(\$".$field->GetName()." ?? '',0,255));");
                    else
                        fwrite($classFile, "\t\tif (LazyMePHP::ACTIVITY_LOG() && \$this->".$field->GetName()."!=\$".$field->GetName().")\n\t\t\t\$this->__log['".$field->GetName()."']=array(substr(\$this->".$field->GetName()." ?? '',0,255), substr(\$".$field->GetName()." ?? '',0,255));");
                    break;
            }
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            if ($field->AllowNull())
                fwrite($classFile, "\t\t\$this->".$field->GetName()."=(!empty(\$".$field->GetName().")?".($field->GetDataLength()>0?"substr(\$".$field->GetName().",0,".$field->GetDataLength().")":"\$".$field->GetName()).":".($field->GetDefaultValue??($field->Allownull()?"null":"''")).");");
            else
                fwrite($classFile, "\t\t\$this->".$field->GetName()."=\$".$field->GetName().";");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t}");
            fwrite($classFile, "\n");
          }
          
          // Generate foreign key object getter if needed
          if ($field->HasForeignKey() && $field->GetForeignField()) {
            $fkGetterName = "get".ucfirst($field->GetName())."_OBJ";
            if (!in_array($fkGetterName, $generatedMethods)) {
              $generatedMethods[] = $fkGetterName;
              fwrite($classFile, "\n");
              fwrite($classFile, "\tpublic function $fkGetterName(): ?".$field->GetForeignTable()." {");
              fwrite($classFile, "\n");
              fwrite($classFile, "\t\tif (\$this->".$field->GetName()."_OBJ === null && \$this->".$field->GetName()." !== null) {");
              fwrite($classFile, "\n");
              fwrite($classFile, "\t\t\t\$this->".$field->GetName()."_OBJ = new ".$field->GetForeignTable()."(\$this->".$field->GetName().", false);");
              fwrite($classFile, "\n");
              fwrite($classFile, "\t\t}");
              fwrite($classFile, "\n");
              fwrite($classFile, "\t\treturn \$this->".$field->GetName()."_OBJ;");
              fwrite($classFile, "\n");
              fwrite($classFile, "\t}\n");
            }
          }

          if ($field->IsPrimaryKey())
          {
            $primaryKeyFound = true;
            
            fwrite($classFile, "\n");
            fwrite($classFile, "\t/**");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * Constructor");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t *");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * Class Constructor");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t *");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * @param int|null \$".$field->GetName());
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * @return null");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t */");
            fwrite($classFile, "\n");
            fwrite($classFile,"\tpublic function __construct(?int \$".$field->GetName()."=null) {");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t// Get Elements from DB using Primary Key");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\tif (isset(\$".$field->GetName().")) {");
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t\t\$this->initialize();");
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t\t\$sql = \"SELECT ");
            $countFields = 0;
            foreach ($db->_Tablefields as $field2)
            {
              fwrite($classFile,($countFields++>0?",":"").$db->_Tablename.".".$field2->GetName());
            }
            fwrite($classFile," FROM ".$db->_Tablename." WHERE ".$db->GetTableName().".".$field->GetName()."=?\";");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t\t\$rtn = LazyMePHP::DB_CONNECTION()->Query(\$sql, array(\$".$field->GetName()."));");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\twhile(\$row = \$rtn->FetchArray())");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t{");
            fwrite($classFile, "\n");
            foreach ($db->_Tablefields as $field2)
            {
              switch (mapSqlTypeToPhpType($field2->GetDataType()))
              {
                case "bool":
                  fwrite($classFile,"\t\t\t\t\$this->".$field2->GetName()."=(bool)\$row['".$field2->GetName()."'];");
                break;
                case "float":
                  fwrite($classFile,"\t\t\t\t\$this->".$field2->GetName()."=(float)\$row['".$field2->GetName()."'];");
                break;
                case "int":
                  fwrite($classFile,"\t\t\t\t\$this->".$field2->GetName()."=(int)\$row['".$field2->GetName()."'];");
                break;
                case "string":
                default:
                  fwrite($classFile,"\t\t\t\t\$this->".$field2->GetName()."=(string)\$row['".$field2->GetName()."'];");
                break;
              }
              fwrite($classFile, "\n");
            }
            fwrite($classFile, "\t\t\t}");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t}");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t}");

            // Save
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t/**");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * Save");
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * Insert Or Update Record Based on Primary Key Existence");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t *");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * @return mixed");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t */");
            fwrite($classFile, "\n");
            fwrite($classFile,"\tpublic function Save() : mixed {");
            fwrite($classFile, "\n");
            $fieldsNotnull = null;
            fwrite($classFile, "\t\t\$fieldsnull = '';");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\$nullFields = [];");
            foreach ($db->_Tablefields as $field2)
            {
              if ($field!=$field2)
              {
                if (!$field2->Allownull()) $fieldsNotnull.= "\t\tif (!isset(\$this->".$field2->GetName().")) \$nullFields[] = '".$field2->GetName()."';\n";
              }
            }
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            if (isset($fieldsNotnull)) {
              fwrite($classFile, $fieldsNotnull);
              fwrite($classFile, "\t\t\$fieldsnull = implode(',', \$nullFields);");
            }
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");

            fwrite($classFile, "\t\tif (\$fieldsnull) {");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\tErrorUtil::trigger_error(\"null value not allowed!\\nFields: \$fieldsnull\", E_USER_ERROR);");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\treturn false;");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t} else {");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\tif (\$this->isInitialized()) {");
            // Update
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\t\$sql = \"UPDATE ".$db->_Tablename." SET ");
            $countFields = 0;
            foreach ($db->_Tablefields as $field2)
            {
              if ($field!=$field2)
              {
                fwrite($classFile,($countFields++>0?",":"")."`".$field2->GetName()."`=:".$field2->GetName());
              }
            }
            fwrite($classFile," WHERE ".$field->GetName()."=:".$field->GetName()."\";");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\t\$params = [");
            fwrite($classFile, "\n");
            $countFields = 1;
            foreach ($db->_Tablefields as $field2)
            {
                fwrite($classFile,"\t\t\t\t\t':".$field2->GetName()."' => ".(LazyMePHP::DB_TYPE() == 2 && $field2->GetDataType()=="bit"?"\$this->".$field2->GetName()."||0":"\$this->".$field2->GetName()).",");
                fwrite($classFile, "\n");
            }
            fwrite($classFile, "\t\t\t\t];");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t\t\t\$method = \"U\";");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t\t\t\$ret = LazyMePHP::DB_CONNECTION()->Query(\$sql, \$params);");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t\t} else {");
            // Insert
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\t\$sql = \"INSERT INTO ".$db->_Tablename." (");
            $countFields = 0;
            foreach ($db->_Tablefields as $field2)
            {
              if ($field!=$field2)
              {
                fwrite($classFile,($countFields++>0?"`,":"")."`".$field2->GetName())."`";
              }
            }
            fwrite($classFile, ($countFields>0?"`":"").") VALUES (");
            $countFields = 0;
            foreach ($db->_Tablefields as $field2)
            {
              if ($field!=$field2)
              {
                fwrite($classFile,($countFields++>0?",":"").":".$field2->GetName());
              }
            }
            fwrite($classFile, ")\";");
            fwrite($classFile, "\n");
            $countFields = 1;
            fwrite($classFile, "\t\t\t\t\$params = [");
            fwrite($classFile, "\n");
            foreach ($db->_Tablefields as $field2)
            {
              if ($field!=$field2)
              {
                fwrite($classFile,"\t\t\t\t\t':".$field2->GetName()."' => ".(LazyMePHP::DB_TYPE() == 2 && $field2->GetDataType()=="bit"?"\$this->".$field2->GetName()."||0":"\$this->".$field2->GetName()).",");
                fwrite($classFile, "\n");
              }
            }
            fwrite($classFile, "\t\t\t\t];");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t\t\t\$method = \"I\";");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t\t\t\$ret = LazyMePHP::DB_CONNECTION()->Query(\$sql, \$params);");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\tif (\$ret) \$this->".$field->GetName()." = LazyMePHP::DB_CONNECTION()->GetLastInsertedID('".$db->_Tablename."');");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t}");
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t// Use LoggingHelper for proper change logging");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\tif (LazyMePHP::ACTIVITY_LOG() && !empty(\$this->__log)) {");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\tif (\$method === 'I') {");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\t\t\\Core\\Helpers\\LoggingHelper::logInsert('".$db->_Tablename."', \$this->__log, (string)\$this->".$field->GetName().");");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\t} else {");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\t\t\\Core\\Helpers\\LoggingHelper::logUpdate('".$db->_Tablename."', \$this->__log, '".$field->GetName()."', (string)\$this->".$field->GetName().");");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\t}");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t}");
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\treturn \$ret;");
            fwrite($classFile, "\n");
            // End Save
            fwrite($classFile, "\t\t}");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t}");
            // Delete
            fwrite($classFile, "\n");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t/**");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * Delete");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t *");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * Deletes Record from Database based Primary Key");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t *");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t * @return bool");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t */");
            fwrite($classFile, "\n");
            fwrite($classFile, "\tpublic function Delete() : bool");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t{");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\tif (!isset(\$this->".$field->GetName().")) return false;");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t// Log deletion using LoggingHelper");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\tif (LazyMePHP::ACTIVITY_LOG()) {");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\t\\Core\\Helpers\\LoggingHelper::logDelete('".$db->_Tablename."', '".$field->GetName()."', (string)\$this->".$field->GetName().");");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t}");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\t\$sql = \"DELETE FROM ".$db->_Tablename." WHERE ".$field->GetName()."=?\";");
            fwrite($classFile, "\n");
            fwrite($classFile,"\t\t\$rtn = LazyMePHP::DB_CONNECTION()->Query(\$sql, array(\$this->".$db->_PrimaryFieldName."));");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t\treturn true;");
            fwrite($classFile, "\n");
            fwrite($classFile, "\t}");
            fwrite($classFile, "\n");
          }
        }
        if (!$primaryKeyFound || $db->IsView())
        {
          fwrite($classFile, "\n");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t/**");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t * Save");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t *");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t * Save operation for views or tables without primary key");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t *");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t * @return mixed");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t */");
          fwrite($classFile, "\n");
          fwrite($classFile, "\tpublic function Save() : mixed {");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t\t// Save is not supported for views or tables without a primary key");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t\treturn null;");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t}");
          fwrite($classFile, "\n");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t/**");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t * Delete");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t *");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t * Delete operation for views or tables without primary key");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t *");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t * @return bool");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t */");
          fwrite($classFile, "\n");
          fwrite($classFile, "\tpublic function Delete() : bool {");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t\t// Delete is not supported for views or tables without a primary key");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t\treturn false;");
          fwrite($classFile, "\n");
          fwrite($classFile, "\t}");
          fwrite($classFile, "\n");
          fwrite($classFile, "\n");
        }
        fwrite($classFile, "\n");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t/**");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * Serialize");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t *");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * Returns object in an array");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t *");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * @param array|null \$mask array to show/hide fields");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t * @return array");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t */");
        fwrite($classFile, "\n");
        fwrite($classFile, "\tpublic function Serialize(\$mask = null) {");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t\t\$vars = get_object_vars(\$this);");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t\tif (\$mask && array_key_exists('".$db->_Tablename."', \$mask))");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t\t\t\$vars = array_intersect_key(\$vars, array_flip(\$mask['".$db->_Tablename."']));");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t\treturn \$vars;");
        fwrite($classFile, "\n");
        fwrite($classFile, "\t}");
        fwrite($classFile, "\n");
        fwrite($classFile, "}");
      }
			else echo "ERROR: Check your permissions to write ".$classesPath."/".$db->_Tablename.".php\n";
		}
		else echo "ERROR: Check your permissions to remove ".$classesPath."/".$db->_Tablename.".php\n";
	}
}
?>

<?php

/**
 * LazyMePHP Batman Server
 * @copyright This file is part of the LazyMePHP developed by Duarte Peixinho
 * @author Duarte Peixinho
 */

// Start performance monitoring
$startTime = microtime(true);
$startMemory = memory_get_usage();

// Load environment variables
$envFile = __DIR__ . '/../../.env';
if (file_exists($envFile)) {
    $lines = file($envFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($lines as $line) {
        if (strpos($line, '=') !== false && strpos($line, '#') !== 0) {
            list($key, $value) = explode('=', $line, 2);
            $_ENV[trim($key)] = trim($value);
            putenv(trim($key) . '=' . trim($value));
        }
    }
}

// Configuration
$debugLogging = $_ENV['BATMAN_DEBUG_LOGGING'] ?? false;
$performanceMonitoring = $_ENV['APP_PERFORMANCE_MONITORING'] ?? true;
$batmanDir = __DIR__ . '/../../batman';

// Debug logging function
function logDebug($message) {
    if (isset($_ENV['BATMAN_DEBUG']) && $_ENV['BATMAN_DEBUG'] === 'true') {
        error_log("[BatmanServer] " . $message);
    }
    // Also log if APP_DEBUG is enabled
    if (isset($_ENV['APP_DEBUG']) && $_ENV['APP_DEBUG'] === 'true') {
        error_log("[BatmanServer] " . $message);
    }
}

// Performance monitoring function
function logPerformance($operation, $duration, $memory) {
    global $performanceMonitoring;
    if ($performanceMonitoring) {
        try {
            // Initialize LazyMePHP if not already done
            if (!class_exists('Core\Helpers\PerformanceUtil')) {
                require_once __DIR__ . '/../bootstrap.php';
            }
            
            $performanceUtil = new Core\Helpers\PerformanceUtil();
            $performanceUtil->logSlowOperation($operation, $duration, []);
        } catch (Exception $e) {
            logDebug("Performance logging failed: " . $e->getMessage());
        }
    }
}

// Error handling function
function handleError($error, $context = '') {
    global $debugLogging;
    
    $errorMessage = date('Y-m-d H:i:s') . " - Batman Server Error: $error";
    if ($context) {
        $errorMessage .= " (Context: $context)";
    }
    
    if ($debugLogging) {
        file_put_contents(
            __DIR__ . '/../../batman_server_errors.log',
            $errorMessage . "\n",
            FILE_APPEND
        );
    }
    
    // Log to system error log as well
    error_log($errorMessage);
}

// Route handler function with enhanced error handling
function handleRoute($route, $filePath, $errorMessage = null) {
    global $batmanDir;
    
    // Check if the request URI matches the route (with or without query parameters)
    $requestUri = parse_url($_SERVER["REQUEST_URI"], PHP_URL_PATH);
    
    // DEBUG: Add logging to see what's being compared
    logDebug("handleRoute: Comparing '$requestUri' to '$route'");
    
    if ($requestUri === $route) {
        $fullPath = $batmanDir . $filePath;
        logDebug("Handling route: $route -> $fullPath (exists: " . (file_exists($fullPath) ? 'YES' : 'NO') . ")");
        
        // Special debugging for get-error-details.php
        if ($route === '/get-error-details.php' || $route === '/batman/get-error-details.php') {
            logDebug("get-error-details.php request - URI: " . $_SERVER["REQUEST_URI"]);
            logDebug("get-error-details.php request - Method: " . $_SERVER["REQUEST_METHOD"]);
            logDebug("get-error-details.php request - GET params: " . json_encode($_GET));
        }
        
        if (file_exists($fullPath)) {
            try {
                include $fullPath;
                exit;
            } catch (Exception $e) {
                handleError("Route execution failed: " . $e->getMessage(), "Route: $route");
                header("HTTP/1.1 500 Internal Server Error");
                echo json_encode([
                    'success' => false,
                    'error' => 'Internal server error',
                    'debug' => $debugLogging ? $e->getMessage() : null
                ]);
                exit;
            }
        } else {
            header("HTTP/1.1 404 Not Found");
            if ($errorMessage) {
                echo json_encode([
                    'success' => false,
                    'error' => $errorMessage
                ]);
            } else {
                echo "404 Not Found - $route not available";
            }
            exit;
        }
    } else {
        // DEBUG: Log when route doesn't match
        logDebug("handleRoute: '$requestUri' does NOT match '$route'");
    }
}

// Enhanced API client endpoint handler
function handleAPIClient($endpoint) {
    global $batmanDir;
    
    $apiEndpoints = [
        'jwt-generate' => 'api_jwt_generate',
        'jwt-validate' => 'api_jwt_validate',
        'encrypt' => 'api_encrypt',
        'decrypt' => 'api_decrypt',
        'hash' => 'api_hash',
        'validate-email' => 'api_validate_email',
        'validate-url' => 'api_validate_url',
        'db-test' => 'api_db_test',
        'performance-test' => 'api_performance_test',
        'session-info' => 'api_session_info',
        'system-info' => 'api_system_info',
        'echo' => 'api_echo'
    ];
    
    if (isset($apiEndpoints[$endpoint])) {
        try {
            // Initialize LazyMePHP
            require_once __DIR__ . '/../bootstrap.php';
            
            $functionName = $apiEndpoints[$endpoint];
            $result = $functionName();
            
            header('Content-Type: application/json');
            echo json_encode([
                'success' => true,
                'endpoint' => $endpoint,
                'data' => $result,
                'timestamp' => date('Y-m-d H:i:s'),
                'server' => 'Batman API Client'
            ]);
            exit;
        } catch (Exception $e) {
            handleError("API Client failed: " . $e->getMessage(), "Endpoint: $endpoint");
            header('Content-Type: application/json');
            echo json_encode([
                'success' => false,
                'error' => $e->getMessage(),
                'endpoint' => $endpoint
            ]);
            exit;
        }
    }
}

// Test API endpoint handler
function handleTestAPI($endpoint) {
    global $batmanDir;
    
    $testEndpoints = [
        'api_basic' => 'test_api_basic',
        'api_auth' => 'test_api_auth',
        'db_connection' => 'test_db_connection',
        'db_query' => 'test_db_query',
        'performance' => 'test_performance',
        'encryption' => 'test_encryption',
        'validation' => 'test_validation',
        'jwt' => 'test_jwt',
        'session' => 'test_session',
        'error_handling' => 'test_error_handling'
    ];
    
    if (isset($testEndpoints[$endpoint])) {
        try {
            // Initialize LazyMePHP
            require_once __DIR__ . '/../bootstrap.php';
            
            $functionName = $testEndpoints[$endpoint];
            $result = $functionName();
            
            header('Content-Type: application/json');
            echo json_encode([
                'success' => true,
                'test' => $endpoint,
                'results' => $result,
                'timestamp' => date('Y-m-d H:i:s')
            ]);
            exit;
        } catch (Exception $e) {
            handleError("Test API failed: " . $e->getMessage(), "Endpoint: $endpoint");
            header('Content-Type: application/json');
            echo json_encode([
                'success' => false,
                'error' => $e->getMessage(),
                'test' => $endpoint
            ]);
            exit;
        }
    }
}

// API Client Functions
function api_jwt_generate() {
    $payload = $_POST['payload'] ?? ['user_id' => 1, 'role' => 'admin', 'exp' => time() + 3600];
    
    if (is_string($payload)) {
        $payload = json_decode($payload, true) ?? $payload;
    }
    
    $jwt = new Core\Security\JWTAuth('test-secret-key');
    $token = $jwt->generateToken($payload);
    
    return [
        'token' => $token,
        'payload' => $payload,
        'expires_in' => 3600
    ];
}

function api_jwt_validate() {
    $token = $_POST['token'] ?? $_GET['token'] ?? '';
    
    if (empty($token)) {
        throw new Exception('Token is required');
    }
    
    $jwt = new Core\Security\JWTAuth('test-secret-key');
    $decoded = $jwt->validateToken($token);
    
    return [
        'valid' => $decoded !== false,
        'payload' => $decoded,
        'token' => $token
    ];
}

function api_encrypt() {
    $data = $_POST['data'] ?? $_GET['data'] ?? '';
    
    if (empty($data)) {
        throw new Exception('Data is required');
    }
    
    // Use a simple encryption key for testing
    $key = str_repeat('A', 32); // 32 bytes for sodium
    $encrypted = Core\Security\EncryptionUtil::encrypt($data, $key);
    
    return [
        'original' => $data,
        'encrypted' => $encrypted,
        'length' => strlen($encrypted)
    ];
}

function api_decrypt() {
    $data = $_POST['data'] ?? $_GET['data'] ?? '';
    
    if (empty($data)) {
        throw new Exception('Encrypted data is required');
    }
    
    // Use a simple encryption key for testing
    $key = str_repeat('A', 32); // 32 bytes for sodium
    $decrypted = Core\Security\EncryptionUtil::decrypt($data, $key);
    
    return [
        'encrypted' => $data,
        'decrypted' => $decrypted,
        'success' => $decrypted !== false
    ];
}

function api_hash() {
    $data = $_POST['data'] ?? $_GET['data'] ?? '';
    $algorithm = $_POST['algorithm'] ?? $_GET['algorithm'] ?? 'default';
    
    if (empty($data)) {
        throw new Exception('Data is required');
    }
    
    // Use PHP's built-in hash function since EncryptionUtil doesn't have hash method
    $hash = hash('sha256', $data);
    
    return [
        'original' => $data,
        'hash' => $hash,
        'algorithm' => 'sha256',
        'length' => strlen($hash)
    ];
}

function api_validate_email() {
    $email = $_POST['email'] ?? $_GET['email'] ?? '';
    
    if (empty($email)) {
        throw new Exception('Email is required');
    }
    
    $validation = new Core\Validations\Validations();
    $isValid = $validation->ValidateEmail($email);
    
    return [
        'email' => $email,
        'valid' => $isValid,
        'validation_type' => 'email'
    ];
}

function api_validate_url() {
    $url = $_POST['url'] ?? $_GET['url'] ?? '';
    
    if (empty($url)) {
        throw new Exception('URL is required');
    }
    
    // Use PHP's built-in filter since Validations doesn't have isUrl method
    $isValid = filter_var($url, FILTER_VALIDATE_URL) !== false;
    
    return [
        'url' => $url,
        'valid' => $isValid,
        'validation_type' => 'url'
    ];
}

function api_db_test() {
    $query = $_POST['query'] ?? $_GET['query'] ?? 'SELECT 1 as test';
    
    // Use LazyMePHP's DB connection method
    $db = Core\LazyMePHP::DB_CONNECTION();
    $result = $db->Query($query);
    
    return [
        'query' => $query,
        'result' => $result ? 'success' : 'failed',
        'connected' => $db !== null,
        'error' => $result === false ? 'Query failed' : null
    ];
}

function api_performance_test() {
    $operation = $_POST['operation'] ?? $_GET['operation'] ?? 'test_operation';
    $duration = (int)($_POST['duration'] ?? $_GET['duration'] ?? 100);
    
    $performanceUtil = new Core\Helpers\PerformanceUtil();
    
    $performanceUtil->startTimer($operation);
    usleep($duration * 1000); // Convert to microseconds
    $result = $performanceUtil->endTimer($operation);
    
    if ($result) {
        $performanceUtil->logSlowOperation($operation, $result, []);
    }
    
    return [
        'operation' => $operation,
        'requested_duration' => $duration,
        'measured_duration' => $result ? $result['duration_ms'] : 0,
        'memory_usage' => memory_get_usage(true),
        'peak_memory' => memory_get_peak_usage(true)
    ];
}

function api_session_info() {
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    
    return [
        'session_id' => session_id(),
        'session_status' => session_status(),
        'session_data' => $_SESSION,
        'session_name' => session_name(),
        'session_save_path' => session_save_path()
    ];
}

function api_system_info() {
    return [
        'php_version' => PHP_VERSION,
        'server_software' => $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown',
        'server_protocol' => $_SERVER['SERVER_PROTOCOL'] ?? 'Unknown',
        'request_method' => $_SERVER['REQUEST_METHOD'] ?? 'Unknown',
        'request_uri' => $_SERVER['REQUEST_URI'] ?? 'Unknown',
        'remote_addr' => $_SERVER['REMOTE_ADDR'] ?? 'Unknown',
        'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? 'Unknown',
        'memory_limit' => ini_get('memory_limit'),
        'max_execution_time' => ini_get('max_execution_time'),
        'upload_max_filesize' => ini_get('upload_max_filesize'),
        'post_max_size' => ini_get('post_max_size'),
        'timezone' => date_default_timezone_get(),
        'current_time' => date('Y-m-d H:i:s'),
        'extensions' => get_loaded_extensions()
    ];
}

function api_echo() {
    return [
        'method' => $_SERVER['REQUEST_METHOD'],
        'headers' => getallheaders(),
        'get' => $_GET,
        'post' => $_POST,
        'files' => $_FILES,
        'server' => $_SERVER,
        'message' => 'Echo endpoint - returns all request data'
    ];
}

// Test functions (copied from test.php for API access)
function test_api_basic() {
    $results = [];
    
    // Test API endpoint availability
    $apiUrl = $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] . '/api/';
    $response = @file_get_contents($apiUrl);
    $results['api_endpoint'] = $response !== false ? 'PASS' : 'FAIL';
    
    // Test API response headers
    $headers = @get_headers($apiUrl);
    $results['api_headers'] = $headers !== false ? 'PASS' : 'FAIL';
    
    return $results;
}

function test_api_auth() {
    $results = [];
    
    try {
        $jwt = new Core\Security\JWTAuth('test-secret-key');
        $token = $jwt->generateToken(['user_id' => 1, 'role' => 'admin']);
        $results['jwt_generation'] = !empty($token) ? 'PASS' : 'FAIL';
        
        $decoded = $jwt->validateToken($token);
        $results['jwt_validation'] = $decoded !== false ? 'PASS' : 'FAIL';
        
    } catch (Exception $e) {
        $results['jwt_generation'] = 'FAIL: ' . $e->getMessage();
        $results['jwt_validation'] = 'FAIL';
    }
    
    return $results;
}

function test_db_connection() {
    $results = [];
    
    try {
        $db = Core\LazyMePHP::DB_CONNECTION();
        $results['connection'] = $db !== null ? 'PASS' : 'FAIL';
        
        $result = $db->Query("SELECT 1 as test");
        $results['basic_query'] = $result !== false ? 'PASS' : 'FAIL';
        
        $tables = $db->Query("SHOW TABLES LIKE '__LOG_%'");
        $results['logging_tables'] = $tables !== false ? 'PASS' : 'FAIL';
        
    } catch (Exception $e) {
        $results['connection'] = 'FAIL: ' . $e->getMessage();
        $results['basic_query'] = 'FAIL';
        $results['logging_tables'] = 'FAIL';
    }
    
    return $results;
}

function test_performance() {
    $results = [];
    
    try {
        $performanceUtil = new Core\Helpers\PerformanceUtil();
        
        // Test timer functionality
        $performanceUtil->startTimer('test_timer');
        usleep(100000); // 100ms
        $result = $performanceUtil->endTimer('test_timer');
        $results['timer'] = $result !== null ? 'PASS' : 'FAIL';
        
        // Test memory usage
        $memory = $performanceUtil->getMemoryUsage();
        $results['memory_usage'] = isset($memory['current']) ? 'PASS' : 'FAIL';
        
        // Test performance logging
        $performanceUtil->logSlowOperation('test_operation', 1500, []);
        $results['slow_operation_log'] = 'PASS';
        
    } catch (Exception $e) {
        $results['timer'] = 'FAIL: ' . $e->getMessage();
        $results['memory_usage'] = 'FAIL';
        $results['slow_operation_log'] = 'FAIL';
    }
    
    return $results;
}

function test_encryption() {
    $results = [];
    
    try {
        $testData = 'Hello, World!';
        $key = str_repeat('A', 32); // 32 bytes for sodium
        
        $encrypted = Core\Security\EncryptionUtil::encrypt($testData, $key);
        $results['encryption'] = !empty($encrypted) ? 'PASS' : 'FAIL';
        
        $decrypted = Core\Security\EncryptionUtil::decrypt($encrypted, $key);
        $results['decryption'] = $decrypted === $testData ? 'PASS' : 'FAIL';
        
        // Use PHP's built-in hash since EncryptionUtil doesn't have hash method
        $hash = hash('sha256', $testData);
        $results['hashing'] = !empty($hash) ? 'PASS' : 'FAIL';
        
        $verifyHash = hash('sha256', $testData) === $hash;
        $results['hash_verification'] = $verifyHash ? 'PASS' : 'FAIL';
        
    } catch (Exception $e) {
        $results['encryption'] = 'FAIL: ' . $e->getMessage();
        $results['decryption'] = 'FAIL';
        $results['hashing'] = 'FAIL';
        $results['hash_verification'] = 'FAIL';
    }
    
    return $results;
}

function test_validation() {
    $results = [];
    
    try {
        $validation = new Core\Validations\Validations();
        
        $results['email_valid'] = $validation->ValidateEmail('test@example.com') ? 'PASS' : 'FAIL';
        $results['email_invalid'] = !$validation->ValidateEmail('invalid-email') ? 'PASS' : 'FAIL';
        $results['url_valid'] = filter_var('https://example.com', FILTER_VALIDATE_URL) !== false ? 'PASS' : 'FAIL';
        $results['url_invalid'] = filter_var('not-a-url', FILTER_VALIDATE_URL) === false ? 'PASS' : 'FAIL';
        
        // Remove non-existent validation methods
        $results['basic_validation'] = 'PASS'; // Placeholder for removed methods
        
    } catch (Exception $e) {
        $results['email_valid'] = 'FAIL: ' . $e->getMessage();
        $results['email_invalid'] = 'FAIL';
        $results['url_valid'] = 'FAIL';
        $results['url_invalid'] = 'FAIL';
        $results['basic_validation'] = 'FAIL';
    }
    
    return $results;
}

function test_jwt() {
    $results = [];
    
    try {
        $jwt = new Core\Security\JWTAuth('test-secret-key');
        
        $payload = ['user_id' => 123, 'role' => 'admin', 'exp' => time() + 3600];
        $token = $jwt->generateToken($payload);
        $results['token_generation'] = !empty($token) ? 'PASS' : 'FAIL';
        
        $decoded = $jwt->validateToken($token);
        $results['token_validation'] = $decoded !== false ? 'PASS' : 'FAIL';
        
        $results['payload_extraction'] = isset($decoded['user_id']) && $decoded['user_id'] == 123 ? 'PASS' : 'FAIL';
        
        $expiredPayload = ['user_id' => 123, 'exp' => time() - 3600];
        $expiredToken = $jwt->generateToken($expiredPayload);
        $expiredResult = $jwt->validateToken($expiredToken);
        $results['expired_token'] = $expiredResult === false ? 'PASS' : 'FAIL';
        
    } catch (Exception $e) {
        $results['token_generation'] = 'FAIL: ' . $e->getMessage();
        $results['token_validation'] = 'FAIL';
        $results['payload_extraction'] = 'FAIL';
        $results['expired_token'] = 'FAIL';
    }
    
    return $results;
}

function test_session() {
    $results = [];
    
    try {
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
        
        $_SESSION['test_var'] = 'test_value';
        $results['session_set'] = isset($_SESSION['test_var']) ? 'PASS' : 'FAIL';
        
        $results['session_get'] = $_SESSION['test_var'] === 'test_value' ? 'PASS' : 'FAIL';
        
        unset($_SESSION['test_var']);
        $results['session_unset'] = !isset($_SESSION['test_var']) ? 'PASS' : 'FAIL';
        
        $results['session_id'] = !empty(session_id()) ? 'PASS' : 'FAIL';
        
    } catch (Exception $e) {
        $results['session_set'] = 'FAIL: ' . $e->getMessage();
        $results['session_get'] = 'FAIL';
        $results['session_unset'] = 'FAIL';
        $results['session_id'] = 'FAIL';
    }
    
    return $results;
}

function test_error_handling() {
    $results = [];
    
    try {
        error_log('Test error message from Batman Server');
        $results['error_logging'] = 'PASS';
        
        try {
            throw new Exception('Test exception');
        } catch (Exception $e) {
            $results['exception_handling'] = $e->getMessage() === 'Test exception' ? 'PASS' : 'FAIL';
        }
        
        $results['error_reporting'] = error_reporting() !== 0 ? 'PASS' : 'FAIL';
        
    } catch (Exception $e) {
        $results['error_logging'] = 'FAIL: ' . $e->getMessage();
        $results['exception_handling'] = 'FAIL';
        $results['error_reporting'] = 'FAIL';
    }
    
    return $results;
}

// Log initial request
logDebug("REQUEST_URI: {$_SERVER['REQUEST_URI']}");
logDebug("Parsed path: " . parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH));

// Remove any API client endpoint handler for /api-client.php
// Only handle /api-client/ (with trailing slash) as API endpoints
if (preg_match('#^/api-client/([a-zA-Z0-9_-]+)$#', $_SERVER["REQUEST_URI"], $matches)) {
    $endpoint = $matches[1];
    handleAPIClient($endpoint);
}

// Handle test API requests
if (strpos($_SERVER["REQUEST_URI"], "/test-api/") === 0) {
    $endpoint = basename($_SERVER["REQUEST_URI"]);
    handleTestAPI($endpoint);
}

// Handle API requests first
if (substr($_SERVER["REQUEST_URI"], 0, 4) == "/api") {
    handleRoute("/api", '/api.php', 'Batman API not found');
}

// Handle specific routes with enhanced mapping
$routes = [
    '/batman/get-changes.php' => '/get-changes.php',
    '/batman/get-error-details.php' => '/get-error-details.php',
    '/batman/errors.php' => '/errors.php',
    '/batman/login.php' => '/login.php',
    '/batman/logout.php' => '/logout.php',
    '/batman/debug.php' => '/debug.php',
    '/batman/test.php' => '/test.php',
    '/batman/api-client.php' => '/api-client.php',
    '/batman/css.css' => '/css.css',
    '/batman/js/' => '/js/',
    '/batman/img/' => '/img/',
    // Also support routes without /batman/ prefix for direct access
    '/get-changes.php' => '/get-changes.php',
    '/get-error-details.php' => '/get-error-details.php',
    '/errors.php' => '/errors.php',
    '/login.php' => '/login.php',
    '/logout.php' => '/logout.php',
    '/debug.php' => '/debug.php',
    '/test.php' => '/test.php',
    '/api-client.php' => '/api-client.php',
    '/css.css' => '/css.css',
    '/js/' => '/js/',
    '/img/' => '/img/'
];

logDebug("Processing routes array with " . count($routes) . " routes");
logDebug("Current REQUEST_URI: " . $_SERVER['REQUEST_URI']);
logDebug("Parsed REQUEST_URI path: " . parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH));

foreach ($routes as $route => $filePath) {
    logDebug("Checking route: '$route' -> '$filePath'");
    if ($route === '/get-error-details.php' || $route === '/batman/get-error-details.php') {
        logDebug("Handling get-error-details.php route");
    }
    handleRoute($route, $filePath);
}

// Handle static files with improved content type detection
$requestedPath = $batmanDir . $_SERVER['REQUEST_URI'];

logDebug("Static file request: $requestedPath (is_dir: " . (is_dir($requestedPath) ? 'YES' : 'NO') . ", is_file: " . (is_file($requestedPath) ? 'YES' : 'NO') . ")");

// If it's a directory, serve index.php first, then index.html
if (is_dir($requestedPath)) {
    $indexPhp = $requestedPath . '/index.php';
    $indexHtml = $requestedPath . '/index.html';
    
    if (file_exists($indexPhp)) {
        include $indexPhp;
        exit;
    } elseif (file_exists($indexHtml)) {
        header('Content-Type: text/html');
        readfile($indexHtml);
        exit;
    }
}

// If it's a PHP file, execute it
if (is_file($requestedPath) && pathinfo($requestedPath, PATHINFO_EXTENSION) === 'php') {
    include $requestedPath;
    exit;
}

// If it's a static file, serve it with enhanced content type detection
if (is_file($requestedPath)) {
    $extension = strtolower(pathinfo($requestedPath, PATHINFO_EXTENSION));
    $contentTypes = [
        'html' => 'text/html; charset=utf-8',
        'htm' => 'text/html; charset=utf-8',
        'json' => 'application/json; charset=utf-8',
        'css' => 'text/css; charset=utf-8',
        'js' => 'application/javascript; charset=utf-8',
        'png' => 'image/png',
        'jpg' => 'image/jpeg',
        'jpeg' => 'image/jpeg',
        'gif' => 'image/gif',
        'svg' => 'image/svg+xml',
        'ico' => 'image/x-icon',
        'woff' => 'font/woff',
        'woff2' => 'font/woff2',
        'ttf' => 'font/ttf',
        'eot' => 'application/vnd.ms-fontobject',
        'pdf' => 'application/pdf',
        'txt' => 'text/plain; charset=utf-8',
        'xml' => 'application/xml; charset=utf-8',
        'zip' => 'application/zip',
        'tar' => 'application/x-tar',
        'gz' => 'application/gzip'
    ];
    
    if (isset($contentTypes[$extension])) {
        header('Content-Type: ' . $contentTypes[$extension]);
    }
    
    // Add cache headers for static assets
    if (in_array($extension, ['css', 'js', 'png', 'jpg', 'jpeg', 'gif', 'svg', 'ico', 'woff', 'woff2', 'ttf'])) {
        header('Cache-Control: public, max-age=31536000'); // 1 year
        header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));
    }
    
    readfile($requestedPath);
    exit;
}

// Default to index.php for all other requests
$defaultPhp = $batmanDir . '/index.php';
$defaultHtml = $batmanDir . '/index.html';

logDebug("Falling through to default handler - serving index.php");

if (file_exists($defaultPhp)) {
    include $defaultPhp;
    exit;
} elseif (file_exists($defaultHtml)) {
    header('Content-Type: text/html; charset=utf-8');
    readfile($defaultHtml);
    exit;
} else {
    header("HTTP/1.1 404 Not Found");
    echo "404 Not Found - Batman dashboard not available";
    if ($debugLogging) {
        echo "\nDebug info:";
        echo "\n- Batman directory: " . $batmanDir;
        echo "\n- Default PHP path: " . $defaultPhp;
        echo "\n- Default HTML path: " . $defaultHtml;
        echo "\n- PHP exists: " . (file_exists($defaultPhp) ? 'YES' : 'NO');
        echo "\n- HTML exists: " . (file_exists($defaultHtml) ? 'YES' : 'NO');
        echo "\n- Requested URI: " . $_SERVER['REQUEST_URI'];
    }
    exit;
}

// Log performance metrics at the end
$endTime = microtime(true);
$endMemory = memory_get_usage();
$duration = ($endTime - $startTime) * 1000; // Convert to milliseconds
$memoryUsed = $endMemory - $startMemory;

logPerformance('batman_server_request', $duration, $memoryUsed);
logDebug("Request completed in " . round($duration, 2) . "ms, memory: " . round($memoryUsed / 1024, 2) . "KB");

?>
